enum ServiceTier {
  NUTRITION
  FITNESS
  ALL
}

type Report @model @auth(rules: [{allow: public}]) {
  id: ID!
  start_date: AWSDate
  end_date: AWSDate
  clientID: ID! @index(name: "byClient")
  DailyNutritions: [DailyNutrition] @manyToMany(relationName: "ReportDailyNutrition")
  Measurements: [Measurement] @manyToMany(relationName: "ReportMeasurement")
}

type Measurement @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  right_arm: Float
  waist: Float
  hips: Float
  right_thigh: Float
  chest: Float
  weight: Float
  picture: String
  clientID: ID! @index(name: "byClient")
  reports: [Report] @manyToMany(relationName: "ReportMeasurement")
}

type DailyNutrition @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  calories: Int
  proteins: Int
  carbs: Int
  fats: Int
  clientID: ID! @index(name: "byClient")
  reports: [Report] @manyToMany(relationName: "ReportDailyNutrition")
}

type Exercises @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  video: String
  WodExercises: [WodExercises] @hasMany(indexName: "byExercises", fields: ["id"])
}

type WodExercises @model @auth(rules: [{allow: public}]) {
  id: ID!
  resistance: Float
  reps: Int
  sets: Int
  rest: Float
  workoutID: ID! @index(name: "byWorkout")
  exercisesID: ID! @index(name: "byExercises")
}

type Workout @model @auth(rules: [{allow: public}]) {
  id: ID!
  warm_up: String
  cool_down: String
  muscle_group: String
  Schedules: [Schedule] @hasMany(indexName: "byWorkout", fields: ["id"])
  WodExercises: [WodExercises] @hasMany(indexName: "byWorkout", fields: ["id"])
}

type Schedule @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  completed: Boolean
  clientID: ID! @index(name: "byClient")
  workoutID: ID! @index(name: "byWorkout")
}

type Goal @model @auth(rules: [{allow: public}]) {
  id: ID!
  short_term_goal: String
  long_term_goal: String
  Clients: [Client] @hasMany(indexName: "byGoal", fields: ["id"])
}

type NutritionPlan @model @auth(rules: [{allow: public}]) {
  id: ID!
  calorie_target: Int
  protein_target: Int
  carb_target: Int
  fat_target: Int
  end_date: AWSDate
}

enum Gender {
  MALE
  FEMALE
}

type Client @model @auth(rules: [{allow: public}]) {
  id: ID!
  start_date: AWSDate
  account_expiry_date: AWSDate
  onboarded: Boolean
  assessed: Boolean
  age: Int
  gender: Gender
  height: Float
  training_frequency: Int
  dietary_restrictions: String
  equipment_list: String
  other_physical_activities: String
  service_tier: ServiceTier
  trainerID: ID! @index(name: "byTrainer")
  goalID: ID! @index(name: "byGoal")
  platformconfigID: ID! @index(name: "byPlatformConfig")
  Schedules: [Schedule] @hasMany(indexName: "byClient", fields: ["id"])
  DailyNutritions: [DailyNutrition] @hasMany(indexName: "byClient", fields: ["id"])
  Measurements: [Measurement] @hasMany(indexName: "byClient", fields: ["id"])
  Reports: [Report] @hasMany(indexName: "byClient", fields: ["id"])
  NutritionPlan: NutritionPlan @hasOne
}

type Trainer @model @auth(rules: [{allow: public}]) {
  id: ID!
  Clients: [Client] @hasMany(indexName: "byTrainer", fields: ["id"])
  PlatformConfig: PlatformConfig @hasOne
}

enum Role {
  TRAINER
  CLIENT
}

enum States {
  FIRSTLOGIN
  REGISTERING
  REGISTERED
  ACTIVE
  SUSPENDED
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String
  first_name: String
  last_name: String
  role: Role
  email: String
  Trainer: Trainer @hasOne
  Client: Client @hasOne
  sub: String!
  state: States!
  phone: String
  address: String
  city: String
  addr_state: String
  zip: String
}

type Todo @model @auth(rules: [{allow: owner}]) {
  id: ID!
  description: String
}

type PlatformConfig @model @auth(rules: [{allow: public}]) {
  id: ID!
  logo_file: String
  favicon_file: String
  primary_color: String
  secondary_color: String
  custom_url: String
  personal_web_enabled: Boolean
  platform_nutrition_enabled: Boolean
  platform_trainer_enabled: Boolean
  Clients: [Client] @hasMany(indexName: "byPlatformConfig", fields: ["id"])
}